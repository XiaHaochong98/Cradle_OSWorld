Assume you are a helpful AI assistant integrated with 'Red Dead Redemption 2', equipped to handle a wide range of tasks in the game. Your advanced capabilities enable you to process and interpret gameplay screenshots and other relevant information.

The all information should be categorized to one or more kinds of <$information_type$>. If you think an information is both "A" and "B" type, you should write "A, B" in the "information_type" field. If you think an information is neither "A" nor "B" type, you should write the information multiple times with different field, for example, a information could both be "Context-Sensitive Prompts" and "Task Guidance".
Explanation of each type:
(1) "Context-Sensitive Information": This information only appears at the upper right of the screenshot. The information that is useful to the current context in game, such as the cash, amount of ammo,current using item, if the player is wanted and etc. The value of this should be a pair of status name and its value. For example "cash: 100$".
(2) "Dynamic Information": This information only appears at the upper left of the screenshot. Onscreen notifications appear in accordance with your actions and events in the world - such as obtaining items or rewards, completing objectives, and becoming wanted. Besides, it also contains usefully hints and information on how to play well in the game, for example "Health is displayed in the lower left corner". The value of this should be the on-screen text.
(3) "Environment Information":This information only appears at the upper middle of the screenshot. The information of the location, time ,weather and etc. The value of this should be a pair of status name and its value. For example "location: VALENTINE". This information typically appears at the upper middle of the screenshot.
(4) "Context-Sensitive Prompts": This information at the lower right of the screenshot and it could also appear on the lower middle and upper left. Whenever you can perform a context-sensitive action with keyboard or mouse, a corresponding prompt will appear, you must categorize it into "Context-Sensitive Prompts" and write a code for it. The value of this should be a json file of format:
```python
The python code to execute
```
A description of the function including what the player will do if this function is called and when this function needs to be called.
For example, if the prompt is "EXAMINE E", your output value should be:
```python
def examine_object():
    pydirectinput.press(e)
```
A skill to examine the object on hand to get more information of it.
The value of this should be based on the screenshot.
(5) "Task Guidance": This information only appears at the lower middle of the screenshot. The game will give guidance on what should be do to proceed the game. The value of this should be the on-screen text, for example "Use W to follow Dutch".
(6) "Dialogue": Conversations between game characters. The value of this should be in the format of "character name: dialogue". For example "Arthur: I'm fine".
(7) "Other": Other information that does not belong to the above categories.

The value of information should be the on-screen text, unless it is a "Context-Sensitive Prompts";

<$image_introduction$>

Given the screenshot, what are the text objects on the screen? You should identify each kind of information from (1) to (7) one by one. You must pay attention to the location of the text to decide its type. For example, a text on the upper left should not be a 'Task Guidance'. You should neglect the minimap that is on the lower left.

Your output should be in the following format, you should only output the following content without adding any other explanation or information:
Context-Sensitive Information:
Information 1
Information 2
...
Dynamic Information:
Information 1
Information 2
...
Environment Information:
Information 1
Information 2
...
Context-Sensitive Prompts:
```python
The python code to execute
```
A description of the function including what the player will do if this function is called and when this function needs to be called.
```python
The python code to execute
```
A description of the function including what the player will do if this function is called and when this function needs to be called.
...
Task Guidance:
Information 1
Information 2
...
Dialogue:
Information 1
Information 2
...
Other:
Information 1
Information 2
...
