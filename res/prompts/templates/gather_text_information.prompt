Assume you are a helpful AI assistant integrated with 'Red Dead Redemption 2' on PC, equipped to handle a wide range of tasks in the game. Your advanced capabilities enable you to process and interpret gameplay screenshots and other relevant information.

<$few_shots$>

<$image_introduction$>

All information should be categorized into one or more kinds of <$information_type$>. If you think a piece of information is both "A" and "B" categories, you should write information in both "A" and "B" categories, for example, "use E to drink water" could both be "Action Guidance" and "Task Guidance" categories.

Item_status: The information that is useful to the current context in the game, such as the cash, amount of ammo, current using item, if the player is wanted, etc. The value of this should be a pair of status names and its value. For example "cash: 100$". If there is no on-screen text and there is no item status, just output "null".

Environment_information: The information about the location, time, weather, etc. The value of this should be a pair of status names and its value. For example, "location: VALENTINE". If there is no on-screen text and there is no environment information, just output "null".

Notification: The game will give notifications showing the events in the world, such as obtaining items or rewards, completing objectives, and becoming wanted. Besides, it also contains useful notifications of the mechanism of the game, such as "Health is displayed in the lower left corner". The content of this must be the on-screen text. If there is no on-screen text and there is no notification, just output "null".

Task_guidance: The game will give guidance on what should be done to proceed with the game. Task guidance needs to obey the following rules:
1. The content of task guidance must be on-screen text prompt, including the menu and the general game interface, for example, "use E to drink water" and "follow Tom". 
2. If there is no on-screen text prompt and there is no task guidance, just output "null". 
3. If the Task Guidance also instructs how to perform a task with keyboard and mouse, it also needs to fill the Action Guidance.  

Action_guidance: The game will give guidance on how to perform a task with keys in the keyboard or mouse, you must write a code based on the on-screen text. The content of the code should obey the following rules:
The code rules are as follows:
1. You should refer to different examples strictly based on the word used to control the key, such as 'use', 'hold', 'release', and 'press'.
2. If 'use' or 'press' is in the prompt to control the key, io_env.key_press must be used to act on it. If it should be a short press, do not specify any duration argument. If it's a long press, a press duration argument (in seconds). Refer to Examples 1, 2, and 3.
3. If 'hold' is in the prompt to control the key, it means keeping the key held with io_env.key_hold (usually indefinitely, with no duration). If you are sure you need to hold it only for a short time, you can specify a duration argument. Refer to Example 4.
4. If you need to use a mouse button, io_env.mouse_click or io_env.mouse_hold must be used and specificy which button to use. Refer to Example 6.
5. All durations are set to a minimum of 2 seconds by default. You can choose a longer or shorter duration. If it should be indefinite, do not specify a duration argument.
6. The name of the created function should only use phrasal verbs, verbs, nouns, or adverbs shown in the prompt and should be in the verb+noun or verb+adverb format, such as drink_water, slow_down_car, ride_faster. Note that words that do not show in the prompt are prohibited.

This is Example 1. If "press" is in the prompt and the text prompt on the screenshot is "press X to play the card", your output should be:
```python
def play_card():
    """
    press "x" to play the card
    """
    io_env.key_press('x')
```
This is Example 2. If "use" is in the prompt and the text prompt on the screenshot is "use ENTER to drink water", your output should be:
```python
def drink_water():
    """
    use "enter" to drink water
    """
    io_env.key_press('enter', 2)
```
This is Example 3. If "use" is in the prompt and the text prompt on the screenshot is "use W and J to jump the barrier", your output should be:
```python
def jump_barrier():
    """
    use "w" and "j" to jump the barrier
    """
    io_env.key_press('w,j', 3)
```
This is Example 4. If "hold" is in the prompt and the text prompt on the screenshot is "hold H to run", your output should be:
```python
def run():
    """
    hold "h" to run
    """
    io_env.key_hold('h')
```
This is Example 5. If "release" is in the prompt and the text prompt on the screenshot is "release Q to drop the items", your output should be:
```python
def drop_items():
    """
    release "q" to drop the items
    """
    io_env.key_release('q')
```
This is Example 6. If the instructions involve the mouse and the text prompt on the screenshot is "hold the rigth mouse button to focus on the target", your output should be:
```python
def focus_on_target():
    """
    hold "right mouse button" to focus
    """
    io_env.mouse_hold(io_env.RIGHT_MOUSE_BUTTON)
```

Dialogue: Conversations between game characters. The content of this should be in the format of "character name: dialogue". For example "Arthur: I'm fine". If there is no on-screen text and there is no dialogue, just output "null".

Other: Other information that does not belong to the above categories. If there is no on-screen text and there is no task guidance, just output "null".

Reasoning: The reasons for classification for each piece of information. 
For Action Guidance, based on the word used to prompt to control the key, such as press, hold, release, what code rules should it follow?

The information should be in the following categories, you should output the following content without adding any other explanation or information. If there is no content for some categories, do not output anything for these categories:
Reasoning:
1. ...
2. ...
...
Item_status:
Item_status is ...
Environment_information:
Environment information is ...
Notification:
Notification is ...
Task_guidance:
Task is ...
Action_guidance:
```python
Python code to execute
```
```python
Python code to execute
```
...
Dialogue:
Dialogue is ...
Other:
Other information is ...


